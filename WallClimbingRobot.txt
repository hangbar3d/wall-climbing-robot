#include <AccelStepper.h>
#include <ESP32Servo.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>

#define dirPinRight 12
#define stepPinRight 14
#define dirPinLeft 27
#define stepPinLeft 26
#define servoPin 25

#define motorInterfaceType 1

AccelStepper stepperRight(motorInterfaceType, stepPinRight, dirPinRight);
AccelStepper stepperLeft(motorInterfaceType, stepPinLeft, dirPinLeft);
Servo myservo;

const float wheelDiameter = 22.5; // in mm
const int stepsPerRevolution = 23; // Assuming each motor has 23 steps per revolution
const float gearReduction = 14.4;
const float effectiveStepsPerRevolution = stepsPerRevolution * gearReduction;
const float stepsPerMili = (effectiveStepsPerRevolution  ) / (3.14159 * wheelDiameter);
const float Kturn = 1.00; // Empirical constant to adjust turn radius
const float turnRadius = 96.5 * Kturn; // in mm adjusted by Kturn
const float turningCircumference = 2 * 3.14159 * turnRadius; // in mm
float RightMotorStepsRemainder = 0.0;
float LeftMotorStepsRemainder = 0.0;
float angleDiff = 0.0;
float XPrev = 0;
float YPrev = 0;
float XPrevPrev = 0;
float YPrevPrev = 0;
size_t i = 0;
int Rightpresteps = 0;
int Leftpresteps = 0;


const int undraw = 30;
const int draw = 70;

AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <title>ESP32 Robot Control</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body { font-family: Arial; display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; margin: 0; }
    canvas { border: 1px solid #000; width: 1000px; height: 1000px; } /* 1m x 1m canvas */
    button { margin-top: 20px; padding: 10px 20px; font-size: 16px; }
  </style>
</head>
<body>
  <canvas id="canvas" width="1000" height="1000"></canvas>
  <button id="sendPathButton">Send Path</button>
  <script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const sendPathButton = document.getElementById('sendPathButton');
    let drawing = false;
    let path = [];

    // Mouse events
    canvas.addEventListener('mousedown', (e) => {
      startDrawing(e.clientX, e.clientY);
    });

    canvas.addEventListener('mousemove', (e) => {
      if (drawing) draw(e.clientX, e.clientY);
    });

    canvas.addEventListener('mouseup', () => {
      drawing = false;
    });

    // Touch events
    canvas.addEventListener('touchstart', (e) => {
      const touch = e.touches[0];
      startDrawing(touch.clientX, touch.clientY);
    });

    canvas.addEventListener('touchmove', (e) => {
      const touch = e.touches[0];
      if (drawing) draw(touch.clientX, touch.clientY);
    });

    canvas.addEventListener('touchend', () => {
      drawing = false;
    });

    sendPathButton.addEventListener('click', () => {
      console.log("Sending path..."); // Log to browser console
      fetch('/path', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ path })
      })
      .then(response => response.text())
      .then(data => console.log(data)); // Log response from server to browser console
    });

    function startDrawing(clientX, clientY) {
      drawing = true;
      const x = (clientX - canvas.offsetLeft) ; // Convert to mm
      const y = (clientY - canvas.offsetTop) ; // Convert to mm
      ctx.moveTo(x , y );
      path.push({ x: x, y: y });
    }

    function draw(clientX, clientY) {
      const x = (clientX - canvas.offsetLeft) ; // Convert to mm
      const y = (clientY - canvas.offsetTop) ; // Convert to mm
      ctx.lineTo(x , y );
      ctx.stroke();
      path.push({ x: x, y: y });
    }
  </script>
</body>
</html>
)rawliteral";

void setup() {
  Serial.begin(115200);
  Serial.println("Setup started");

  // Create access point (AP)
  WiFi.softAP("ESP32Robot", "password"); // Change "password" to your desired AP password

  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  // Initialize motors and servo
  stepperRight.setMaxSpeed(500);
  stepperRight.setAcceleration(250);
  stepperLeft.setMaxSpeed(500);
  stepperLeft.setAcceleration(250);
  myservo.attach(servoPin);

  // Serve HTML page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
  });

  // Handle receiving path data
  server.on("/path", HTTP_POST, [](AsyncWebServerRequest *request){
    // This handler won't be called until request->send() is called within the body handler
  }, NULL, [](AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total) {
    if (!index) {
      Serial.println("Body start");
      request->_tempObject = malloc(total + 1);
      if (request->_tempObject == nullptr) {
        Serial.println("Failed to allocate memory");
        request->send(500, "text/plain", "Server memory allocation failed");
        return;
      }
    }

    memcpy((uint8_t*)request->_tempObject + index, data, len);

    if (index + len == total) {
      ((uint8_t*)request->_tempObject)[total] = '\0';
      Serial.println("Body complete");

      String json = String((char*)request->_tempObject);
      free(request->_tempObject);
      request->_tempObject = nullptr;

      Serial.print("Received JSON: ");
      Serial.println(json);

      DynamicJsonDocument doc(total*2);
     
      DeserializationError error = deserializeJson(doc, json);
      if (error) {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(error.f_str());
        request->send(400, "text/plain", "Invalid JSON");
        return;
      }

      JsonArray path = doc["path"];
      moveRobotAlongPath(path);

      request->send(200, "text/plain", "Path received");
    }
  });

  server.begin();
  Serial.println("Setup complete");
}

void loop() {
  // Main loop is empty because we use async server
}

void moveRobotAlongPath(JsonArray path) {
  Serial.println("Moving along path...");
  
  // Init prev, current values
  /*
  float XPrev = path[0]["x"];
  float YPrev = path[0]["y"];
  float XPrevPrev = path[0]["x"];
  float YPrevPrev = path[0]["y"];  
  */
  for ( i ; i < path.size(); i=i+1) {
    Serial.println("i");
    Serial.println(i);
    float x = path[i]["x"];
    float y = path[i]["y"];
	
    Serial.print("Moving to point: ");
    Serial.print(x);
    Serial.print(", ");
    Serial.println(y);
    if (i<1)
    {angleDiff = 0;}
    else{
    angleDiff = atan2(y - YPrev, x - XPrev) - atan2(YPrev - YPrevPrev, XPrev - XPrevPrev); // Angle from previous point to next one.
    }
    // Calculate distance to move 
    float distance = sqrt(pow(x - XPrev, 2) + pow(y - YPrev, 2));
    
    // Move in arc
    Serial.println("angleDiff");
    Serial.println(angleDiff);
    Serial.println("distance");
    Serial.println(distance);
    moveInArc(distance, angleDiff);
    
    // Update prev, current positions
	XPrevPrev = XPrev;
	YPrevPrev = YPrev;
	XPrev = x;
	YPrev = y;
  }
}


void moveInArc(float distance, float angle) {
  // Calculate steps for each motor
  int RightMotorSteps = (int)(stepsPerMili*(distance - turnRadius * angle));
  RightMotorStepsRemainder += (stepsPerMili*(distance - turnRadius * angle)) - RightMotorSteps;
  
  int LeftMotorSteps = (int)(stepsPerMili*(distance + turnRadius * angle));
  LeftMotorStepsRemainder += (stepsPerMili*(distance + turnRadius * angle)) - LeftMotorSteps;
  /*
  if (RightMotorStepsRemainder > 1.0)
  {
	  RightMotorSteps += 1;
	  RightMotorStepsRemainder -= 1.0;
  }
  
  if (LeftMotorStepsRemainder > 1.0)
  {
	  LeftMotorSteps += 1;
	  LeftMotorStepsRemainder -= 1.0;
  }  
  */
  // Move both motors
  stepperRight.moveTo(RightMotorSteps+Rightpresteps);
  stepperLeft.moveTo(LeftMotorSteps+Leftpresteps);
  Serial.println("RightMotorSteps");
  Serial.println(RightMotorSteps);
  Serial.println("LeftMotorSteps");
  Serial.println(LeftMotorSteps);
  Rightpresteps=RightMotorSteps+Rightpresteps;
  Leftpresteps=LeftMotorSteps+Leftpresteps;

  while (stepperRight.distanceToGo() != 0 || stepperLeft.distanceToGo() != 0) {
    stepperRight.run();
    stepperLeft.run();
    //Serial.println(stepperRight.distanceToGo());
    yield();
    //delay(1);
  }
}
